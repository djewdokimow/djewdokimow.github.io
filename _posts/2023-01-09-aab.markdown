---
layout: post
title:  "AAB i podpisywanie aplikacji w Google Play Console"
date:   2023-01-09 13:00:00 +0200
categories: Android
---

Aplikacje Android, które powstały w sierpniu 2021 lub później, mogą być dostarczane do konsoli Google jedynie w formacie AAB. Jeśli pracujesz nad aplikacją, która powstała wcześniej, to możliwe, że w myśl zasady „po co zmieniać coś, co działa” ciągle budujesz swoje paczki w formacie APK. Istnieje co najmniej kilka dobrych powodów, by w tym konkretnym przypadku złamać tę regułę.

# Korzyści stosowania formatu AAB

Po pierwsze, AAB pozwala zmniejszyć liczbę danych pobieranych na urządzenie użytkownika. Artefakt aplikacji z każdym kolejnym wydaniem robi się cięższy i nawet w dobie wszechobecnego mobilnego internetu użytkownik nie musi być zachwycony koniecznością pobierania kolejnych 90 megabajtów na swoje urządzenie. Sam plik instalacyjny waży tyle samo co jego odpowiednik w starszym formacie, ale Google Play nie dopuszcza do pobierania przez użytkownika grafik w rozdzielczości innej niż jego ekran czy danych związanych z innymi wersjami językowymi. Po drugie, przemawiają za tym względy bezpieczeństwa. AAB wymusza zastosowanie „idiotoodpornego” mechanizmu, który chroni klucz przed skutkami jego utracenia i dostania się w niepowołane ręce. Po trzecie, formatu AAB nie można w tej chwili nazwać żadną nowością. Lepiej zapoznać się z formatem APK trochę wcześniej niż przy okazji lektury maila ogłaszającego datę końca wsparcia dla formatu APK przez Google Play Console.

# Konfiguracja w panelu Google Play Console

W tym artykule przedstawię najprostszego sposobu na konfigurację panelu w taki sposób, by możliwe było dostarczanie aktualizacji w formacie AAB. Pominę kwestię modularyzacji projektu. Już same opcje domyślne dają zaskakujące rezultaty. Dla przykładu, ilość danych pobranych na Samsung J5 2017 w przypadku jednej z rozwijanych przeze mnie aplikacji skurczył się do niecałych 30 MB dla nowych użytkowników, zarówno plik APK jak i AAB ważą około 70 MB.

Najpierw należy zezwolić Google Play na zarządzanie kluczem podpisywania aplikacji. W menu konsoli należy wybrać opcję Setup/App Integrity, a następnie kliknąć we wstążkę App Signing.

![Play Console App Signing](/docs/assets/images/play_console_app_signing.png)

Teraz należy załadować do panelu klucz prywatny, który jest aktualnie używany do podpisywania aplikacji. Oczywiście nie udostępniamy pliku JKS, tylko z pomocą Android Studio eksportujemy plik o rozszerzeniu PEPK. Opcja jest dostępna podczas budowania paczki APK/AAB w IDE (Build > Generate Signed Bundle/APK > wybrać Android App Bundle, w następnym dialogu zaznaczyć checkbox podpisany Export encrypted for enrolling published apps in Google Play App Signing).

<img src="/docs/assets/images/exporting_pepk.png" width="400"/>

Nieobowiązkowym krokiem konfiguracji jest wygenerowanie nowego klucza w celu podpisania nim aplikacji. Warto go wykonać, ponieważ oryginalny klucz będzie można zastąpić w dowolnym momencie w przypadku jego utraty lub kompromitacji. Od tej pory używać do podpisywania paczek z kolejnymi aktualizacjami będziemy używać nowego klucza. Zarówno oryginalny jak i nowy plik keystore należy przechowywać - [jak rekomenduje Google][app-signing] - w bezpiecznym miejscu. Na pytanie, co to właściwie znaczy, każdy musi odpowiedzieć we własnym zakresie albo po prostu postępować zgoodnie z wewnętrznymi procedurami firmy. Repozytorium projektu jest całkiem bezpiecznym miejscem do przechowywania klucza, o ile mówimy o prywatnym projekcie, do którego dostęp mają tylko uprawnieni użytkownicy, a sama aplikacja repozytorium jest chroniona przez VPN i dwuetapową weryfikację. Jeśli ktoś był w stanie przełamać tyle zabezpieczeń, możemy uznać, że dostęp do kluczy po prostu mu się należał. Inna sprawa, że konsekwencje utraty klucza są nieporównywalnie bardziej dotkliwe niż jego wyciek.

<img src="/docs/assets/images/new_keystore.png" width="400"/>

Po utworzeniu nowego klucza należy wygenerować w terminalu plik PEM za pomocą komendy `keytool -export -rfc -keystore nazwa_keystore.jks -alias nazwa_aliasa upload -alias nazwa_pliku_wyjsciowego.pem` i załadować plik PEM, klikając opcję Upload your upload key certificate. Następnie należy zatwierdzić zmiany, klikając w przycisk Save i zaakceptować regulamin. Od tej pory (teoretycznie) nie musimy przechowywać naszego oryginalnego klucza.

![Upload Key PEM](/docs/assets/images/upload_key_pem.png)

![Success](/docs/assets/images/success.png)

Konsola zaczyna akceptować pliki AAB. Przed wykonaniem powyższych kroków było to niemożliwe. 

![Bundle Explorer](/docs/assets/images/bundle_explorer.png)

Klucz do podpisywania aplikacji można wymieniać raz do roku. Klucza do przesyłania aplikacji wymieniać nie można, ale ponieważ jest on zarządzany przez Google, w przypadku jego utraty lub wycieku można skontaktować się z pomocą techniczną i liczyć na rozwiązanie problemu.

# Możliwe problemy

Szczególną uwagę polecam zwrócić na to, czy zbudowana w nowy sposób aplikacja będzie potrafiła korzystać z bibliotek do map, analityki czy powiadomień push. Jeśli używamy usług firmy Google (lub jakichkolwiek powiązanych z podpisem cyfrowym aplikacji), należy zaktualizować hashe SHA1 i SHA256 w odpowiednich panelach (warto sprawdzić w pierwszej kolejności Firebase i Google Cloud). Ważna uwaga: jeśli wystawiamy bety na Firebase, podpis cyfrowy aplikacji jest wymieniany na testowy, należy więc skopiować odpowiednie hashe z panelu i użyć ich w taki sam sposób jak tych z zakładki App Signing panelu Google Play.

Polecam postępować zgodnie ze sztuką i po zbudowaniu aplikacji w nowy sposób przetestować całą aplikację. Instalacja z paczki AAB nie jest aż tak banalna jak w przypadku plików APK i potrzebujemy do niej konsolowego narzędzia bundletool. Możemy również wystawić betę na Firebase albo użyć testów wewnętrznych w konsoli deweloperskiej Google Play.

[app-signing]: https://developer.android.com/studio/publish/app-signing
